#!/bin/bash

program_name="puredns"
program_version="v1.0"
program_description="Very accurate massdns resolving and bruteforcing."

COL_LOGO='\033[0;36m'
COL_PROGNAME='\033[1;32m'
COL_PROGVERS='\033[0;36m'
COL_PROGDESC='\033[1;37m'
COL_META='\033[1;37m'
COL_MESSAGE='\033[0;36m'
COL_MESSAGE_TEXT='\033[0;37m'
COL_SUCCESS='\033[1;32m'
COL_SUCCESS_TEXT='\033[0;37m'
COL_ERROR='\033[0;31m'
COL_ERROR_TEXT='\033[0;37m'
COL_TEXT='\033[1;37m'
COL_PV='\033[1;30m'
COL_RESET='\033[0m'

help() {
	echo "puredns v1.0"
	echo "Use massdns to accurately resolve a large amount of subdomains and extract wildcard domains."
	echo ""
	usage
}

usage() {
	echo "Usage:"
	echo "	puredns [--skip-validation] [--skip-wildcard-check] [--write-massdns <filename>]"
	echo "		[--write-wildcards <filename>] [--write-wildcard-answers <filename>] [--help] <command> <args>"
	echo ""
	echo "	Example:"
	echo "		puredns [args] resolve domains.txt"
	echo "		puredns [args] bruteforce wordlist.txt domain.com"
	echo ""
	echo "	Commands:"
	echo "		resolve	<filename>		Resolve a list of domains"
	echo "		bruteforce <wordlist> <domain>	Perform subdomain bruteforcing on a domain using a wordlist"
	echo ""
	echo "	Optional:"
	echo "		-b,  --bin <path>			Path to massdns binary file"
	echo ""
	echo "		-r,  --resolvers <filename>		Text file containing resolvers"
	echo "		-rt, --resolvers-trusted <filename>	Text file containing trusted resolvers"
	echo ""
	echo "		-l,  --limit				Limit queries per second for public resolvers"
	echo "							(default: unlimited)"
	echo "		-lt, --limit-trusted			Limit queries per second for trusted resolvers"
	echo "							(default: 10 * number of trusted resolvers)"
	echo ""
	echo "		-ss, --skip-sanitize			Do not sanitize the list of domains to test"
	echo "							By default, domains are set to lowercase and"
	echo "							only valid characters are kept"
	echo "		-sw, --skip-wildcard-check		Do no perform wildcard detection and filtering"
	echo "		-sv, --skip-validation			Do not validate massdns results using trusted resolvers"
	echo ""
	echo "		-w,  --write <filename>			Write valid domains to a file"
	echo "		-wm, --write-massdns <filename>		Write massdns results to a file"
	echo "		-ww, --write-wildcards <filename>	Write wildcard root subdomains to a file"
	echo "		-wa, --write-answers <filename>		Write wildcard DNS answers to a file"
	echo ""
	echo "		-h, --help				Display this message"
}

print_header() {
	printf "${COL_LOGO}" >&2
	printf '                          _           \n' >&2
	printf '                         | |          \n' >&2
	printf ' _ __  _   _ _ __ ___  __| |_ __  ___ \n' >&2
	printf "| '_ \\| | | | '__/ _ \\/ _\` | '_ \\/ __|\n" >&2
	printf '| |_) | |_| | | |  __/ (_| | | | \__ \\\n' >&2
	printf '| .__/ \__,_|_|  \___|\__,_|_| |_|___/\n' >&2
	printf '| |                                   \n' >&2
	printf "|_|                       ${COL_PROGNAME}${program_name} ${COL_PROGVERS}${program_version}\\n" >&2
	printf '\n' >&2
	printf "${COL_PROGDESC}${program_description}\n" >&2
	printf "${COL_RESET}\n" >&2
}

log_message() {
	printf "${COL_META}[${COL_MESSAGE}*${COL_META}] ${COL_MESSAGE_TEXT}$1${COL_RESET}\n" >&2
}

log_success() {
	printf "${COL_META}[${COL_SUCCESS}!${COL_META}] ${COL_SUCCESS_TEXT}$1${COL_RESET}\n" >&2
}

log_error() {
	printf "${COL_META}[${COL_ERROR}X${COL_META}] ${COL_ERROR_TEXT}$1${COL_RESET}\n" >&2
}

domain_count() {
	echo "$(cat "${domains_work}" | wc -l)" 2>/dev/null
}

wildcard_count() {
	echo "$(cat "${wildcards_work}" | wc -l)" 2>/dev/null
}

parse_args() {
	massdns_bin="massdns"

	resolvers_file="$(dirname $0)/resolvers.txt"
	resolvers_trusted_file="$(dirname $0)/trusted.txt"

	limit_rate=0
	limit_rate_trusted=0

	skip_validation=0
	skip_wildcard_check=0
	skip_sanitize=0

	output_file=''
	massdns_file=''
	wildcards_file=''
	wildcard_answers_file=''

	set +u
	while :; do
		case $1 in
			--bin|-b)
				massdns_bin=$2
				shift
				;;
			--resolvers|-r)
				resolvers_file=$2
				shift
				;;
			--resolvers-trusted|-rt)
				resolvers_trusted_file=$2
				shift
				;;
			--limit|-l)
				limit_rate=$2
				shift
				;;
			--limit-trusted|-lt)
				limit_rate_trusted=$2
				shift
				;;
			--skip-sanitize|-ss)
				skip_sanitize=1
				;;
			--skip-validation|-sv)
				skip_validation=1
				;;
			--skip-wildcard-check|-sw)
				skip_wildcard_check=1
				;;
			--write|-w)
				output_file=$2
				shift
				;;
			--write-massdns|-wm)
				massdns_file=$2
				shift
				;;
			--write-wildcard-answers|-wa)
				wildcard_answers_file=$2
				shift
				;;
			--write-wildcards|-ww)
				wildcards_file=$2
				shift
				;;
			--help|-h)
				help
				exit 0
				;;
			resolve)
				mode=0
				domains_file=$2
				shift
				;;
			bruteforce)
				mode=1
				wordlist_file=$2
				domain=$3
				shift
				shift
				;;
			"")
				break
				;;
			*)
				usage
				echo ""
				echo "Error: unknown argument: $1"
				exit 1
				;;
		esac
		shift
	done

	if [[ -z "${mode}" ]]; then
		usage
		echo ""
		echo "Error: no command given"
		exit 1
	fi

	if [[ ! -f "${resolvers_file}" ]]; then
		echo "Error: unable to open resolvers file ${resolvers_file}"
		echo ""
		exit 1
	fi

	if [[ "${skip_validation}" -eq 0 ]] && [[ ! -f "${resolvers_trusted_file}" ]]; then
		echo "Error: unable to open trusted resolvers file ${resolvers_trusted_file}"
		echo ""
		exit 1
	fi

	if [[ "${mode}" -eq 0 ]]; then
		if [[ -z "${domains_file}" ]]; then
			usage
			echo ""
			echo "Error: no domains file specified"
			exit 1
		fi

		if [[ ! -f "${domains_file}" ]]; then
			echo "Error: unable to open domains file ${domains_file}"
			echo ""
			exit 1
		fi
	fi

	if [[ "${mode}" -eq 1 ]]; then
		if [[ -z "${wordlist_file}" ]]; then
			usage
			echo ""
			echo "Error: no wordlist specified"
			exit 1
		fi

		if [[ ! -f "${wordlist_file}" ]]; then
			echo "Error: unable to open wordlist file ${wordlist_file}"
			echo ""
			exit 1
		fi

		if [[ -z "${domain}" ]]; then
			usage
			echo ""
			echo "Error: no domain specified"
			exit 1
		fi
	fi

	set -u

	if [[ "${limit_rate_trusted}" -eq 0 ]]; then
		limit_rate_trusted=$(( $(wc -l "${resolvers_trusted_file}" | awk '{ print $1 }') * 10 ))
	fi
}

check_requirements() {
	# massdns
	"${massdns_bin}" --help > /dev/null 2>&1
	if [[ ! $? -eq 0 ]]; then
		echo "Error: unable to execute massdns. Make sure it is present and that the"
		echo "path to the binary is added to the PATH environment variable."
		echo ""
		echo "Alternatively, specify the path to massdns using --bin"
		exit 1
	fi

	# pv
	pv -V > /dev/null 2>&1
	if [[ ! $? -eq 0 ]]; then
		echo "Error: unable to execute pv. Make sure pv is installed."
		echo ""
		echo "This might help: sudo apt-get install -y pv"
		exit 1
	fi

	# wildcarder
	$(dirname $0)/wildcarder --version > /dev/null 2>&1
	if [[ ! $? -eq 0 ]]; then
		echo "Error: unable to execute wildcarder. Make sure it is present and that the requirements have been installed."
		echo ""
		echo "This might help: pip install -r requirements.txt"
		exit 1
	fi
}

init() {
	tempdir="$(mktemp -d -t puredns.XXXXXXXX)"

	domains_work="${tempdir}/domains.txt"
	massdns_work="${tempdir}/massdns.txt"
	tempfile_work="${tempdir}/tempfile.txt"

	wildcards_work="${tempdir}/wildcards.txt"
	wildcard_answers_work="${tempdir}/wildcard_answers.txt"
	wildcard_resolving_roots_work="${tempdir}/wildcard_resolving_roots.txt"
}

prepare_domains_list() {
	log_message "Preparing list of domains for massdns..."
	if [[ "${mode}" -eq 0 ]]; then
		cp "${domains_file}" "${domains_work}"
	elif [[ "${mode}" -eq 1 ]]; then
		sed -E "s/^(.*)$/\\1.${domain}/" "${wordlist_file}" > "${domains_work}"
	fi

	if [[ "${skip_sanitize}" -eq 0 ]]; then
		log_message "Sanitizing list..."

		# Set all to lowercase
		cat "${domains_work}" | tr '[:upper:]' '[:lower:]' > "${tempfile_work}"
		cp "${tempfile_work}" "${domains_work}"

		# Keep only valid characters
		cat "${domains_work}" | grep -o '^[a-z0-9\.\-]*$' > "${tempfile_work}"
		cp "${tempfile_work}" "${domains_work}"
	fi

	log_success "$(domain_count) domains to resolve with massdns"
}

massdns_public() {
	local domainfile=$1
	local domains_outputfile=$2
	local massdns_outputfile=$3

	invoke_massdns "${domainfile}" "${resolvers_file}" "${limit_rate}" "${domains_outputfile}" "${massdns_outputfile}"
}

massdns_trusted() {
	local domainfile=$1
	local domains_outputfile=$2
	local massdns_outputfile=$3

	invoke_massdns "${domainfile}" "${resolvers_trusted_file}" "${limit_rate_trusted}" "${domains_outputfile}" "${massdns_outputfile}"
}

invoke_massdns() {
	local domains_file=$1
	local resolvers=$2
	local rate=$3
	local domains_outputfile=$4
	local massdns_outputfile=$5

	local count="$(cat "${domains_file}" | wc -l)"

	local pv_args=("-l" "-F" "Queries per seconds: %r %t %e Progress: %p" "-s" "${count}")
	if [[ ! "${rate}" -eq 0 ]]; then
		pv_args+=("-L" "${rate}")
	fi

	printf "${COL_PV}" >&2
	cat "${domains_file}" | pv "${pv_args[@]}" | "${massdns_bin}" -q -r "${resolvers}" -o S -t A -w "${massdns_outputfile}"
	cat "${massdns_outputfile}" | awk -F '. ' '{ print $1 }' | sort -u > "${domains_outputfile}"
	printf "${COL_RESET}" >&2
}

massdns_resolve() {
	log_message "Invoking massdns... this can take some time"
	massdns_public "${domains_work}" "${domains_work}" "${massdns_work}"
	log_success "$(domain_count) domains returned a DNS answer"
}

filter_wildcards_from_answers() {
	domains_grep_file="${tempdir}/wildcard_domains_grep"
	answers_grep_file="${tempdir}/wildcard_answers_grep"
	badrecords_file="${tempdir}/wildcard_badrecords"

	# Create a grep file to match only the entries ending with a wildcard subdomains
	sed -E 's/^\*\.(.*)$/.\1. /' "${wildcards_work}" > "${domains_grep_file}"

	# Create a grep file to match only wildcard answers
	sed -E 's/^(.*)$/ \1/' "${wildcard_answers_work}" > "${answers_grep_file}"

	# Create a list of all the bad records
	grep -Ff "${domains_grep_file}" "${massdns_work}" | grep -Ff "${answers_grep_file}" | sort -u > "${badrecords_file}"

	# Remove bad records from massdns results file
	sort -u "${massdns_work}" > "${tempfile_work}"
	comm -2 -3 "${tempfile_work}" "${badrecords_file}" > "${massdns_work}"

	# Add back known wildcard root subdomains that may have been filtered out
	cat "${massdns_work}" "${wildcard_resolving_roots_work}" | sort -u > ${tempfile_work}
	cp "${tempfile_work}" "${massdns_work}"

	# Extract valid domains
	cat "${massdns_work}" | awk -F '. ' '{ print $1 }' | sort -u > "${domains_work}"
}

cleanup_wildcards() {
	log_message "Detecting wildcard root subdomains..."

	$(dirname $0)/wildcarder --load-massdns-cache "${massdns_work}" --write-domains "${wildcards_work}" --write-answers "${wildcard_answers_work}" "${domains_work}" > /dev/null

	if [[ ! $? -eq 0 ]]; then
		log_error "An error happened running wildcarder. Exiting..."
		cleanup
		exit 1
	fi

	log_success "$(wildcard_count) wildcard root subdomains found"
	if [[ ! "$(wildcard_count)" -eq 0 ]]; then
		cat "${wildcards_work}" >&2

		log_message "Resolving wildcards with trusted resolvers..."
		sed -i 's/^\*\.//' "${wildcards_work}"
		massdns_trusted "${wildcards_work}" "${tempfile_work}" "${wildcard_resolving_roots_work}"
		log_success "Found $(cat "${wildcard_resolving_roots_work}" | wc -l) valid DNS answers for wildcards"

		log_message "Cleaning wildcards from results..."
		filter_wildcards_from_answers
		log_success "$(domain_count) domains remaining"
	fi
}

massdns_validate() {
	log_message "Validating domains against trusted resolvers... (rate limit: ${limit_rate_trusted} queries per second)"
	massdns_trusted "${domains_work}" "${domains_work}" "${massdns_work}"
}

write_output_files() {
	echo "" >&2

	cat ${domains_work}

	if [[ -n "${output_file}" ]]; then
		cp "${domains_work}" "${output_file}"
	fi

	if [[ -n "${massdns_file}" ]]; then
		cp "${massdns_work}" "${massdns_file}"
	fi

	if [[ -n "${wildcards_file}" ]]; then
		cp "${wildcards_work}" "${wildcards_file}"
		sed -Ei 's/(.*)/*.\1/' "${wildcards_file}"
	fi

	if [[ -n "${wildcard_answers_file}" ]]; then
		cp "${wildcard_answers_work}" "${wildcard_answers_file}"
	fi
}

cleanup() {
	debug=0
	if [[ "${debug}" -eq 1 ]]; then
		echo "" >&2
		echo "Intermediary files are in ${tempdir}" >&2
	else
		rm -rf "${tempdir}"
	fi
}

main() {
	parse_args $@
	check_requirements

	print_header
	init

	prepare_domains_list

	massdns_resolve

	if [[ "${skip_wildcard_check}" -eq 0 ]]; then
		cleanup_wildcards
	fi

	if [[ "${skip_validation}" -eq 0 ]]; then
		massdns_validate
	fi

	if [[ "${skip_wildcard_check}" -eq 0 ]] && [[ ! "$(wildcard_count)" -eq 0 ]]; then
		log_message "Removing straggling wildcard results..."
		filter_wildcards_from_answers
	fi

	log_success "Found $(domain_count) valid domains!"

	write_output_files

	cleanup
}

main $@
